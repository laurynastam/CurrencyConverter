#pragma checksum "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "52fec571cdabb33d42fc6fa04809fdb02f04e051"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\_ViewImports.cshtml"
using CurrencyConverter;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\_ViewImports.cshtml"
using CurrencyConverter.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"52fec571cdabb33d42fc6fa04809fdb02f04e051", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3cc34418be3fd801a0bcb73f723c922b7c685ef3", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Currency converter</h1>

    <div id=""currencyConverterWrapper"">

        <br />
        <br />
        <div id=""errorsContainer"">

        </div>
        <br />
        <br />




        <label for=""valueInCurrency1"">Sum in currency 1: </label>
        <input type=""type"" name=""valueInCurrency1"" id=""valueInCurrency1"" onkeyup=""currency1ValueChanged()"" />
        <label for=""currencySelector"">Currency: </label>
");
#nullable restore
#line 24 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
          
            if (ViewBag.CurrentCurencies != null)
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <select id=\"currencySelector\" onchange=\"currencyChanged()\">\r\n");
#nullable restore
#line 28 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                      

                        foreach (var item in ViewBag.CurrentCurencies)
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52fec571cdabb33d42fc6fa04809fdb02f04e0514551", async() => {
                WriteLiteral("\r\n                                ");
#nullable restore
#line 33 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                           Write(item.NameOfCurency);

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
#nullable restore
#line 32 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                               WriteLiteral(item.Rate);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 35 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"

                        }

                    

#line default
#line hidden
#nullable disable
            WriteLiteral("                </select>\r\n                <p id=\"currencyConvertionRate\">Currency convertion rate to EUR: ");
#nullable restore
#line 40 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                                                                           Write(ViewBag.CurrentCurencies[0].Rate);

#line default
#line hidden
#nullable disable
            WriteLiteral(" </p>\r\n");
#nullable restore
#line 41 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
            }
            else
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <h1 style=\"color:red\">Failed to fetch currencies...</h1>\r\n");
#nullable restore
#line 45 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
            }

        

#line default
#line hidden
#nullable disable
            WriteLiteral(@"        <br />
        <br />




        <label for=""valueInCurrency2"">Sum in currency 2: </label>
        <input type=""type"" name=""valueInCurrency2"" id=""valueInCurrency2"" onkeyup=""currency2ValueChanged()"" />
        <label for=""currencySelector"">Currency: </label>
");
#nullable restore
#line 57 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
          
            if (ViewBag.CurrentCurencies != null)
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <select id=\"currencySelector2\" onchange=\"currencyChanged()\">\r\n");
#nullable restore
#line 61 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                      

                        foreach (var item in ViewBag.CurrentCurencies)
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52fec571cdabb33d42fc6fa04809fdb02f04e0518769", async() => {
                WriteLiteral("\r\n                                ");
#nullable restore
#line 66 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                           Write(item.NameOfCurency);

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
#nullable restore
#line 65 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                               WriteLiteral(item.Rate);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 68 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"

                        }

                    

#line default
#line hidden
#nullable disable
            WriteLiteral("                </select>\r\n                <p id=\"currencyConvertionRate2\">Currency convertion rate to EUR: ");
#nullable restore
#line 73 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                                                                            Write(ViewBag.CurrentCurencies[0].Rate);

#line default
#line hidden
#nullable disable
            WriteLiteral(" </p>\r\n");
#nullable restore
#line 74 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
            }
            else
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <h1 style=\"color:red\">Failed to fetch currencies...</h1>\r\n");
#nullable restore
#line 78 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
            }

        

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        <br />\r\n        <br />\r\n\r\n\r\n\r\n");
#nullable restore
#line 87 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
          
            if (ViewBag.AwailableHistoricalDates != null)
            {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                <div id=""historicalConvertionController"">
                    <label for=""useHistoricalRate"">Use historical conversion rate: </label>
                    <input type=""checkbox"" name=""useHistoricalRate"" id=""useHistoricalRate"" onclick=""resetHistorical()"" />
                    <br />
                    <select id=""historicalRateDateSelector"" onchange=""updateCurrencySellector()"" disabled>
");
#nullable restore
#line 95 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                          

                            foreach (var item in ViewBag.AwailableHistoricalDates)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52fec571cdabb33d42fc6fa04809fdb02f04e05113128", async() => {
                WriteLiteral("\r\n                                    ");
#nullable restore
#line 100 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                               Write(item);

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
#nullable restore
#line 99 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                                   WriteLiteral(item);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 102 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"
                            }

                        

#line default
#line hidden
#nullable disable
            WriteLiteral("                    </select>\r\n                </div>\r\n");
#nullable restore
#line 107 "C:\Users\LT\Desktop\Bandomoji2\CurrencyConverter\CurrencyConverter\Views\Home\Index.cshtml"


            }

        

#line default
#line hidden
#nullable disable
            WriteLiteral(@"        <br />
        <br />

    </div>

</div>

<script>

    function resetHistorical() {
        var checkBox = $(""#useHistoricalRate"");
        if (checkBox.is("":checked"")) {
            $('#historicalRateDateSelector').removeAttr(""disabled""); 
            $(""#errorsContainer"")[0].innerHTML = """";
            $(""#errorsContainer"")[0].innerHTML = """";
            updateCurrencySellector();
        }
        else {
            $('#historicalRateDateSelector').prop(""disabled"", true);
            location.reload();
        }
    }

    function updateCurrencySellector() {
        let selectedDate = $(""#historicalRateDateSelector"").val();
        $.ajax({
            type: ""GET"",
            url: ""/Home/GetHistoricCurencies"",
            data: { Date: selectedDate },
            contentType: ""application/json; charset=utf-8"",
            dataType: 'json',
            success: function (result) {
                $(""#currencySelector"")[0].innerHTML = """";
                $(""#curre");
            WriteLiteral(@"ncySelector2"")[0].innerHTML = """";
                let newOptions = """";
                for (let i = 0; i < result.historicalData.length; i++) {
                    newOptions += ""<option value='"" + result.historicalData[i].rate + ""'> "" + result.historicalData[i].nameOfCurency + "" </option>""
                }
                $(""#currencySelector2"")[0].innerHTML = newOptions;
                $(""#currencySelector"")[0].innerHTML = newOptions;

            },
            error: function (xhr, status, err) {
            }
        });
    }

    function currency2ValueChanged() {
        $(""#errorsContainer"")[0].innerHTML = """";
        $(""#valueInCurrency1"").val("""");
        let valueInCurrency2 = parseFloat($(""#valueInCurrency2"").val());
        let convertionRate = parseFloat($(""#currencySelector"").val());
        let conversionRate2 = parseFloat($(""#currencySelector2"").val());
        let convert = true;
        if (typeof (valueInCurrency2) == ""undefined"" || valueInCurrency2 == null || isNaN");
            WriteLiteral(@"(valueInCurrency2)) {
            $(""#errorsContainer"")[0].innerHTML += ""Failed to determine value in converted currency"";
            convert = false;
        }
        if (typeof (convertionRate) == ""undefined"" || convertionRate == null || isNaN(convertionRate)) {
            $(""#errorsContainer"")[0].innerHTML += ""Failed to determine conversion rate"";
            convert = false;
        }
        if (typeof (conversionRate2) == ""undefined"" || conversionRate2 == null || isNaN(conversionRate2)) {
            $(""#errorsContainer"")[0].innerHTML += ""Failed to determine second conversion rate"";
            convert = false;
        }
        if (convert) {
            let sumInEuros = valueInCurrency2 / conversionRate2;
            let sumInSecondCurrency = sumInEuros * convertionRate;
            $(""#valueInCurrency1"").val(sumInSecondCurrency);
        }
    }

    function currency1ValueChanged() {
        $(""#errorsContainer"")[0].innerHTML = """";
        $(""#valueInCurrency2"").val("""");
   ");
            WriteLiteral(@"     let valueInCurrency1 = parseFloat($(""#valueInCurrency1"").val());
        let convertionRate = parseFloat($(""#currencySelector"").val());
        let conversionRate2 = parseFloat($(""#currencySelector2"").val());
        let convert = true;
        if (typeof (valueInCurrency1) == ""undefined"" || valueInCurrency1 == null || isNaN(valueInCurrency1)) {
            $(""#errorsContainer"")[0].innerHTML += ""Failed to determine value in Euros"";
            convert = false;
        }
        if (typeof (convertionRate) == ""undefined"" || convertionRate == null || isNaN(convertionRate)) {
            $(""#errorsContainer"")[0].innerHTML += ""Failed to determine conversion rate"";
            convert = false;
        }
        if (typeof (conversionRate2) == ""undefined"" || conversionRate2 == null || isNaN(conversionRate2)) {
            $(""#errorsContainer"")[0].innerHTML += ""Failed to determine second conversion rate"";
            convert = false;
        }

        if (convert) {
            let sumInEuros");
            WriteLiteral(@" = valueInCurrency1 / convertionRate;
            let sumInSecondCurrency = sumInEuros * conversionRate2;
            $(""#valueInCurrency2"").val(sumInSecondCurrency);
        }
    }



    function currencyChanged() {
        $(""#valueInCurrency1"").val("""")
        $(""#valueInCurrency2"").val("""");
        $(""#currencyConvertionRate"")[0].innerText = ""Currency convertion rate to EUR: "" + $(""#currencySelector"").val();
        $(""#currencyConvertionRate2"")[0].innerText = ""Currency convertion rate to EUR: "" + $(""#currencySelector2"").val();
    }

</script>

<style>
    #currencyConverterWrapper {
        width: 50%;
        margin-left: 25%;
        border: 2px solid rgba(109,138,255,0.7);
        border-radius: 6px;
        min-height: 200px;
        padding: 20px;
    }

    #historicalConvertionController {
        padding: 10px;
        border: 2px solid rgba(170,239,255,0.9);
        border-radius: 8px;
    }

    #errorsContainer {
        color: red;
        font-weight: bo");
            WriteLiteral("ld;\r\n    }\r\n\r\n</style>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
